#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# so that parsing this with python2 does not raise SyntaxError
from __future__ import print_function

import os
import subprocess
import sys
import traceback
import time
import argparse
import ipaddress

from librarianlib.library import Library
from librarianlib.ebook_search import list_authors, list_tags
from librarianlib.ebook_search import Search, EvaluateMatch
from librarianlib.openlibrary_search import OpenLibrarySearch

if sys.version_info < (3, 0, 0):
    print("You need python 3.0 or later to run this script.")
    sys.exit(-1)

try:
    assert subprocess.call(["ebook-convert", "--version"],
                           stdout=subprocess.DEVNULL) == 0
except AssertionError as err:
    print("Calibre must be installed for epub -> mobi conversions!")
    sys.exit(-1)

try:
    import yaml
except Exception as err:
    print("pyyaml (for python3) must be installed!")
    sys.exit(-1)

librarian_dir = os.path.dirname(os.path.realpath(__file__))


def open_config():
    # configuration
    librarian_dir = os.path.dirname(os.path.realpath(__file__))
    yaml_config = os.path.join(librarian_dir, "librarian.yaml")
    assert os.path.exists(yaml_config)
    config = yaml.load(open(yaml_config, 'r'))
    try:
        assert "kindle_root" in config.keys()
        assert "library_root" in config.keys()
        assert "kindle_documents_subdir" in config.keys()

        config["import_dir"] = os.path.join(config["library_root"],
                                            "import")
        config["library_dir"] = os.path.join(config["library_root"],
                                             "library")
        config["mobi_dir"] = os.path.join(config["library_root"],
                                          "mobi")
        config["imported_dir"] = os.path.join(config["library_root"],
                                              "imported")
        config["collections"] = os.path.join(config["library_root"],
                                             "collections.json")
        config["kindle_documents"] = os.path.join(config["kindle_root"],
                                                  "documents",
                                                  "librarian")
        config["kindle_extensions"] = os.path.join(config["kindle_root"],
                                                   "extensions")

        # create folders if necessary
        if not os.path.exists(config["import_dir"]):
            os.makedirs(config["import_dir"])
        if not os.path.exists(config["imported_dir"]):
            os.makedirs(config["imported_dir"])
        if not os.path.exists(config["library_dir"]):
            os.makedirs(config["library_dir"])
        if not os.path.exists(config["mobi_dir"]):
            os.makedirs(config["mobi_dir"])

        if "server" in config.keys():
            # raise ValueError if not valid IP address
            ipaddress.ip_address(config["server"]["IP"])
            # same if not int
            int(config["server"]["port"])
        if "scrape_root" in config.keys():
            assert os.path.exists(config["scrape_root"])
        if "backup_imported_ebooks" in config.keys():
            assert isinstance(config["backup_imported_ebooks"], bool)
        if "author_aliases" in config.keys():
            assert isinstance(config["author_aliases"], dict)
        if "interactive" in config.keys():
            assert isinstance(config["interactive"], bool)
        if "ebook_filename_template" not in config.keys():
            config["ebook_filename_template"] = "$a/$a ($y) $t"

    except Exception as err:
        print("Missing config option: ", err)
        raise Exception("Invalid configuration file!")

    return config


if __name__ == "__main__":

    start = time.perf_counter()

    parser = argparse.ArgumentParser(description='Librarian. A very early \
                                     version of it.')

    group_import_export = parser.add_argument_group('Library management',
                                                    'Import, analyze, and sync\
                                                    with Kindle.')
    group_import_export.add_argument('-i',
                                     '--import',
                                     dest='import_ebooks',
                                     action='store_true',
                                     default=False,
                                     help='import ebooks')
    group_import_export.add_argument('-r',
                                     '--refresh',
                                     dest='refresh',
                                     action='store_true',
                                     default=False,
                                     help='refresh library')
    group_import_export.add_argument('--scrape',
                                     dest='scrape',
                                     action='store_true',
                                     default=False,
                                     help='scrape for ebooks')
    group_import_export.add_argument('-s',
                                     '--sync',
                                     dest='sync',
                                     action='store',
                                     const=True,
                                     default=False,
                                     nargs='?',
                                     metavar="PATH",
                                     help='sync library (or a subset with \
                                     --filter or --list)')
    group_import_export.add_argument('-k',
                                     '--kindle',
                                     dest='kindle',
                                     action='store_true',
                                     default=False,
                                     help='when syncing, sync to kindle')
    group_import_export.add_argument('--serve',
                                     dest='serve',
                                     action='store_true',
                                     default=False,
                                     help='serve filtered ebooks over http')

    group_tagging = parser.add_argument_group(
        'Tagging', 'Search and tag ebooks. For --list, --filter and --exclude,\
        STRING can begin with author:, title:, tag:, series: or progress: for \
        a more precise search.')
    group_tagging.add_argument('-f',
                               '--filter',
                               dest='filter_ebooks_and',
                               action='store',
                               nargs="*",
                               metavar="STRING",
                               help='list ebooks in library matching ALL \
                               patterns')
    group_tagging.add_argument('-l',
                               '--list',
                               dest='filter_ebooks_or',
                               action='store',
                               nargs="*",
                               metavar="STRING",
                               help='list ebooks in library matching ANY \
                               pattern')
    group_tagging.add_argument('-x',
                               '--exclude',
                               dest='filter_exclude',
                               action='store',
                               nargs="+",
                               metavar="STRING",
                               help='exclude ALL STRINGS from current \
                               list/filter')
    group_tagging.add_argument('-t',
                               '--add-tag',
                               dest='add_tag',
                               action='store',
                               nargs="+",
                               metavar="TAG",
                               help='tag listed ebooks in library')
    group_tagging.add_argument('-d',
                               '--delete-tag',
                               dest='delete_tag',
                               action='store',
                               nargs="+",
                               metavar="TAG",
                               help='remove tag(s) from listed ebooks in \
                               library')
    group_tagging.add_argument('-c',
                               '--collections',
                               dest='collections',
                               action='store',
                               nargs='?',
                               metavar="COLLECTION",
                               const="",
                               help='list all tags or ebooks with a given \
                               tag or "untagged"')
    group_tagging.add_argument('-a',
                               '--authors',
                               dest='authors',
                               action='store',
                               nargs='?',
                               metavar="AUTHOR",
                               const="",
                               help='list all authors')
    group_tagging.add_argument('--progress',
                               dest='read',
                               choices=['read', 'reading', 'unread'],
                               help='Set filtered ebooks as read.')

    group_tagging = parser.add_argument_group('Metadata', 'Display and write\
                                              epub metadata.')
    group_tagging.add_argument('--info',
                               dest='info',
                               action='store',
                               metavar="METADATA_FIELD",
                               nargs='*',
                               help='Display all or a selection of metadata \
                               tags for filtered ebooks.')
    group_tagging.add_argument('--openlibrary',
                               dest='openlibrary',
                               action='store_true',
                               default=False,
                               help='Search OpenLibrary for filtered ebooks.')
    group_tagging.add_argument('-w',
                               '--write-metadata',
                               dest='write_metadata',
                               action='store',
                               metavar="METADATA_FIELD_AND_VALUE",
                               nargs='+',
                               help='Write one or several field:value \
                               metadata.')
    group_tagging.add_argument('--update-files-metadata',
                               dest='write_to_file',
                               action='store_true',
                               default=False,
                               help='Write the metada to the ebook file')

    group_tagging = parser.add_argument_group('Configuration',
                                              'Configuration options.')
    group_tagging.add_argument('--config',
                               dest='config',
                               action='store',
                               metavar="CONFIG_FILE",
                               nargs=1,
                               help='Use an alternative configuration file.')
    group_tagging.add_argument('--readable-db',
                               dest='readable',
                               action='store_true',
                               default=False,
                               help='Save the database in somewhat readable \
                               form.')

    args = parser.parse_args()

    # a few checks on the arguments
    if not len(sys.argv) > 1:
        print("No option selected. Try -h.")
        sys.exit()

    if args.kindle and (not args.sync and not args.serve):
        print("The --kindle option can only modify the --sync or"
              " --serve option.")
        sys.exit()

    is_not_filtered = (args.filter_ebooks_and is None and
                       args.filter_ebooks_or is None)
    if is_not_filtered and \
       (args.filter_exclude is not None or args.info is not None):
        print("The --exclude/--info options can only be used with --list"
              " or --filter.")
        sys.exit()
    if (args.add_tag is not None or args.delete_tag is not None) and \
       (args.filter_ebooks_and is None or args.filter_ebooks_and == []) and \
       (args.filter_ebooks_or is None or args.filter_ebooks_or == []):
        print("Tagging all ebooks, or removing a tag from all ebooks, arguably"
              " makes no sense. Use the --list/--filter options to filter"
              " the library.")
        sys.exit()

    if args.config is not None:
        config_filename = args.config[0]
        if os.path.isabs(config_filename):
            if os.path.exists(config_filename):
                LIBRARY_CONFIG = config_filename
        else:
            config_filename = os.path.join(librarian_dir, config_filename)
            if os.path.exists(config_filename):
                LIBRARY_CONFIG = config_filename

    db = os.path.join(librarian_dir, "library.json")
    automatic_save = True
    with Library(open_config(), db) as l:
        try:
            l.open_db()
        except Exception as err:
            print("Error loading DB: ", err)
            sys.exit(-1)

        try:
            if args.scrape:
                l.scrape_dir_for_ebooks()
            if args.import_ebooks:
                if l.import_new_ebooks():
                    args.refresh = True
            if args.refresh:
                some_are_incomplete = l.refresh_db()
                if some_are_incomplete:
                    print("Fix metadata for these ebooks and run this again.")
                    sys.exit(-1)

            # filtering
            filtered = []
            s = Search(l.ebooks, is_exact=False)

            if args.collections is not None:
                if args.collections == "":
                    all_tags = list_tags(l.ebooks)
                    for tag in sorted(all_tags.keys()):
                        print(" -> %s (%s)" % (tag, all_tags[tag]))
                elif args.collections == "untagged":
                    filtered = s.excludes(["tag:"])
                    filtered = s.run_search(EvaluateMatch.AND)
                else:
                    s.is_exact = True
                    filtered = s.filters(['tag:%s' % args.collections])
                    filtered = s.run_search(EvaluateMatch.AND)
            elif args.authors is not None:
                if args.authors == "":
                    all_authors = list_authors(l.ebooks)
                    for author in sorted(all_authors.keys()):
                        print(" -> %s (%s)" % (author, all_authors[author]))
                else:
                    s.is_exact = True
                    filtered = s.filters(['author:%s' % args.authors])
                    filtered = s.run_search(EvaluateMatch.AND)
            else:
                if args.filter_exclude is not None:
                    s.excludes(args.filter_exclude)
                if args.filter_ebooks_and is not None:
                    s.filters(args.filter_ebooks_and)
                    filtered = s.run_search(EvaluateMatch.AND)
                elif args.filter_ebooks_or is not None:
                    s.filters(args.filter_ebooks_or)
                    filtered = s.run_search(EvaluateMatch.OR)

            # add/remove tags
            if args.add_tag is not None and filtered != []:
                for ebook in filtered:
                    for tag in args.add_tag:
                        ebook.add_to_collection(tag)
            if args.delete_tag is not None and filtered != []:
                for ebook in filtered:
                    for tag in args.delete_tag:
                        ebook.remove_from_collection(tag)

            for ebook in sorted(filtered, key=lambda x: x.filename):
                if args.info is None:
                    print(" -> ", ebook)
                    if args.openlibrary:
                        s = OpenLibrarySearch()
                        result = s.search(ebook)
                        if result:
                            result.compare_to_source(ebook)
                else:
                    if args.info == []:
                        print(ebook.info())
                    else:
                        print(ebook.info(args.info))

                if args.write_metadata is not None:
                    if not ebook.update_metadata(args.write_metadata):
                        automatic_save = False

                if args.read is not None:
                    ebook.set_progress(args.read)

                if args.write_to_file:
                    ebook.sync_ebook_metadata()

            if args.sync:
                if args.sync is True and args.kindle:
                    l.sync_with_kindle(filtered)
                elif os.path.exists(args.sync) and os.path.isdir(args.sync):
                    l.sync_with_kindle(filtered, kindle_sync=False,
                                        destination_dir=args.sync)
                else:
                    print("Invalid sync command.")
                    sys.exit()

            if args.serve:
                if args.kindle:
                    l.serve(filtered, kindle_sync=True)
                else:
                    l.serve(filtered, kindle_sync=False)

            if automatic_save:
                # TODO: automatic save to file!!! + manual
                l.save_db(args.readable)
        except Exception as err:
            print(err)
            traceback.print_exc()
            sys.exit(-1)

        print("Everything done in %.2fs." % (time.perf_counter() - start))
